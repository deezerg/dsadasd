
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∑–∞–¥–∞–Ω–∞

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç—á–µ—Ç—ã

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ---
class Form(StatesGroup):
    contract = State()
    static_id = State()
    quantity = State()
    screenshot = State()

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ---
contracts_buttons = [
    "–ê—Ç–µ–ª—å–µ III - 1000",
    "–¢–æ–≤–∞—Ä —Å –∫–æ—Ä–∞–±–ª—è - 600",
    "–ê–ø–µ–ª—å—Å–∏–Ω—ã - 24",
    "–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 80",
    "–°–æ—Å–Ω–∞ - 100",
    "–ü—à–µ–Ω–∏—Ü–∞ - 250"
]

def contracts_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for c in contracts_buttons:
        kb.add(KeyboardButton(c))
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
    return kb

# --- /start ---
@dp.message_handler(commands=["start"], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=contracts_keyboard())
    await Form.contract.set()

# --- –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ---
@dp.message_handler(state=Form.contract)
async def choose_contract(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=contracts_keyboard())
        return

    if message.text not in contracts_buttons:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(contract=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=back_keyboard())
    await Form.static_id.set()

# --- –í–≤–æ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ID ---
@dp.message_handler(state=Form.static_id)
async def input_static_id(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=contracts_keyboard())
        await Form.contract.set()
        return

    if not message.text.isdigit():
        await message.answer("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(static_id=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=back_keyboard())
    await Form.quantity.set()

# --- –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ---
@dp.message_handler(state=Form.quantity)
async def input_quantity(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=back_keyboard())
        await Form.static_id.set()
        return

    if not message.text.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(quantity=int(message.text))
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=back_keyboard())
    await Form.screenshot.set()

# --- –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ ---
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.screenshot)
async def receive_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    contract = data.get("contract")
    static_id = data.get("static_id")
    quantity = data.get("quantity")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    photo = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    caption = f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}\n–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID: {static_id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo, caption=caption)

    await message.answer("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Çüëå", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö ---
@dp.message_handler(state=Form.screenshot)
async def check_photo_type(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=back_keyboard())
        await Form.quantity.set()
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç—á—ë—Ç–∞.")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
